@using SimplCommerce.Module.Core.Models

@model SimplCommerce.Module.Catalog.Areas.Catalog.ViewModels.ProductDetail

@inject SignInManager<User> SignInManager

@{
    ViewBag.Title = Model.MetaTitle ?? Model.Name;
}

@section additionalMeta {
    <meta name="title" content="@ViewBag.Title" />
    <meta name="keywords" content="@Model.MetaKeywords" />
    <meta name="description" content="@Model.MetaDescription" />
}

@section head {
    <link simpl-append-version="true" rel="stylesheet" href="~/lib/smoothproducts/css/smoothproducts.css" />
    <link simpl-append-version="true" rel="stylesheet" href="~/_content/SimplCommerce.Module.Catalog/product-detail.css" />
}
<div class="container p-3">
    <nav aria-label="breadcrumb">
        <ol class="breadcrumb">
            <li class="breadcrumb-item"><a href="~/">@Localizer["Home"]</a></li>
            @if (Model.Categories.Any())
            {
                @await Component.InvokeAsync("CategoryBreadcrumb", new { categoryIds = Model.Categories.Select(x => x.Id) })
            }
            <li class="breadcrumb-item active" aria-current="page">@Model.Name</li>
        </ol>
    </nav>
    <div class="product-detail">
        <div class="d-flex justify-content-between">
            <div class="prd-img-container">
                <div id="main-product-images" class="product-images">
                    <div class="sp-loading">
                        <div class="spinner-border text-danger" role="status">
                            <span class="visually-hidden">Loading...</span>
                        </div>
                    </div>
                    <div class="sp-wrap">
                        @foreach (var image in Model.Images)
                        {
                            <a href="@image.Url">
                                <img src="@image.ThumbnailUrl" alt="" />
                            </a>
                        }
                    </div>
                </div>
                @foreach(var variant in Model.Variations)
                {
                    if (variant.Images.Any())
                    {
                        <div class="product-images" data-images-variation-name="@variant.NormalizedName" style="display:none;">
                            <div class="sp-wrap">
                                @foreach (var image in variant.Images)
                                {
                                    <a href="@image.Url">
                                        <img src="@image.ThumbnailUrl" alt="" />
                                    </a>
                                }
                            </div>
                        </div>
                     }
                }
            </div>
            <div class="prd-dtl-container">
                <div class="product-name">
                    <h1 class="d-flex align-items-center mb-0">@Model.Name</h1>
                    @if (Model.Brand != null)
                    {<a href="~/@Model.Brand.Slug" class="fs-6">@Model.Brand.Name</a>}
                </div>
                <div class="product-short-desc">@Html.Raw(Model.ShortDescription)</div>
                @if(!string.IsNullOrWhiteSpace(Model.Description) || !string.IsNullOrWhiteSpace(Model.Specification) || Model.Attributes.Any()){
                <div class="accordion accordion-flush">
                    @if (!string.IsNullOrWhiteSpace(Model.Description))
                    {
                        <div class="accordion-item">
                            <h2 class="accordion-header">
                                <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#collapse-detail">
                                @Localizer["Product detail"]
                                </button>
                            </h2>
                            <div id="collapse-detail" class="accordion-collapse collapse">
                                <div class="accordion-body">
                                @Html.Raw(Model.Description)
                                </div>
                            </div>
                        </div>
                    }
                    @if (!string.IsNullOrWhiteSpace(Model.Specification))
                    {
                        <div class="accordion-item">
                            <h2 class="accordion-header">
                                <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#collapse-specification">
                                @Localizer["Product specification"]
                                </button>
                            </h2>
                            <div id="collapse-specification" class="accordion-collapse collapse">
                                <div class="accordion-body">
                                @Html.Raw(Model.Specification)
                                </div>
                            </div>                            
                        </div>
                    }
                    @if (Model.Attributes.Any())
                    {
                        <div class="accordion-item">
                            <h2 class="accordion-header">
                                <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#collapse-attributes">
                                @Localizer["Product attributes"]
                                </button>
                            </h2>
                            <div id="collapse-attributes" class="accordion-collapse collapse">
                                <div class="accordion-body">
                                    <table class="table table-striped mb-0">
                                        @foreach (var attr in Model.Attributes)
                                        {
                                            <tr>
                                                <td>@attr.Name</td>
                                                <td>@attr.Value</td>
                                            </tr>
                                        }
                                    </table>
                                </div>
                            </div>                            
                        </div>
                    }
                </div>
                }
                @if (Model.HasVariation)
                {
                    <form>
                        <div class="product-attrs d-flex justify-content-around">
                            @foreach (var option in Model.AvailableOptions)
                            {
                                <div>
                                    <h4>@option.OptionName</h4>
                                    <ul class="list-inline product-attr-options mb-0">
                                        @foreach (var value in option.Values)
                                        {
                                            var shouldChecked = Model.Variations.First().Options.Any(x => x.Value == value);
                                            <li class="list-inline-item">
                                                <input type="radio" value="@value" checked="@shouldChecked" name="@option.OptionName" />
                                                @if (Model.OptionDisplayValues.ContainsKey(value) && !String.IsNullOrWhiteSpace(Model.OptionDisplayValues[value].Value))
                                                {
                                                    if (Model.OptionDisplayValues[value].DisplayType == "color")
                                                    {<label title="@value" class="color" style="background-color:@Model.OptionDisplayValues[value].Value"></label>}
                                                    else
                                                    {<label class="badge">@Model.OptionDisplayValues[value].Value</label>}
                                                }
                                                else
                                                {<label class="badge">@value</label>}
                                            </li>
                                        }
                                    </ul>
                                </div>
                            }
                        </div>
                    </form>
                    foreach (var variant in Model.Variations)
                    {   
                        var hidden = variant != Model.Variations.First() ? "collapse" : "";
                        <div class="product-variation @hidden" data-variation-name="@variant.NormalizedName">
                            <div class="add-to-cart">
                                <form class="d-flex flex-wrap justify-content-between align-items-center">
                                    <div class="product-price d-flex flex-column align-items-center">
                                    @if (variant.IsCallForPricing)
                                    {
                                        <span class="label label-info">@Localizer["Call for pricing"]</span>
                                    }
                                    else
                                    {
                                        <h4>@variant.CalculatedProductPrice.PriceString</h4>
                                        if (variant.CalculatedProductPrice.PercentOfSaving > 0)
                                        {
                                            <div>
                                                <span class="product-price-regular fz-old-price me-1">@variant.CalculatedProductPrice.OldPriceString</span><span class="product-price-saving fz-discount">-@variant.CalculatedProductPrice.PercentOfSaving%</span>
                                            </div>
                                        }
                                    }
                                    </div>
                                    <input type="hidden" name="productId" value="@variant.Id" />
                                    <div class="product-quantity">
                                        @if (variant.StockTrackingIsEnabled && variant.StockQuantity <= 0)
                                        {
                                        <div class="out-of-stock">
                                            <span class="label label-danger">@Localizer["Out of stock"]</span>
                                        </div>
                                        }
                                        else
                                        {
                                        <button type="button" class="quantity-button" name="subtract" value="-">-</button>
                                        <input type="text" class="quantity-field" readonly="readonly" name="qty" value="1">
                                        <button type="button" class="quantity-button" name="add" value="+">+</button>
                                        }
                                    </div>
                                    <div class="d-flex" style="height:45px">
                                        <button type="button" disabled="@(!variant.IsAllowToOrder || (variant.StockTrackingIsEnabled && variant.StockQuantity <= 0))" class="fz-cart btn-add-cart" style="width:45px"><i class="fa-solid fa-cart-plus fa-xl"></i></button>
                                        @if (SignInManager.IsSignedIn(User))
                                        {
                                            <a class="fz-order add-to-wishlist" href="#" style="width:45px"><i class="fa-solid fa-face-grin-hearts fa-xl"></i></a>
                                        }
                                        else
                                        {
                                            <a class="fz-order add-to-wishlist" style="width:45px" asp-area="Catalog" asp-controller="Account" asp-action="Login" asp-route-returnurl="@($"{Context.Request.Path}{Context.Request.QueryString}")"><i class="fa-solid fa-face-grin-hearts fa-xl"></i></a>
                                        }                                        
                                        <a href="#" class="fz-cart add-to-comparison" style="width:45px"><i class="fa-solid fa-not-equal fa-xl"></i></a>
                                    </div>                                    
                                </form>
                            </div>
                        </div>
                    }
                    <div class="product-variation-notavailable collapse">
                        <span class="label label-danger">@Localizer["Not available"]</span>
                    </div>
                }
                else
                {
                    <div class="add-to-cart">
                        <form class="d-flex flex-wrap justify-content-between align-items-center">
                            <div class="product-price d-flex flex-column align-items-center">
                            @if (Model.IsCallForPricing)
                            {
                                <span class="label label-info">@Localizer["Call for pricing"]</span>
                            }
                            else
                            {
                                <h4>@Model.CalculatedProductPrice.PriceString</h4>
                                if (Model.CalculatedProductPrice.PercentOfSaving > 0)
                                {
                                    <div>
                                        <span class="product-price-regular fz-old-price me-1">@Model.CalculatedProductPrice.OldPriceString</span><span class="product-price-saving fz-discount">-@Model.CalculatedProductPrice.PercentOfSaving%</span>
                                    </div>
                                }
                            }
                            </div>
                            <input type="hidden" name="productId" value="@Model.Id" />
                            <div class="product-quantity">
                                @if (Model.StockTrackingIsEnabled && Model.StockQuantity <= 0)
                                {
                                <div class="out-of-stock">
                                    <span class="label label-danger">@Localizer["Out of stock"]</span>
                                </div>
                                }
                                else
                                {
                                <button type="button" class="quantity-button" name="subtract" value="-">-</button>
                                <input type="text" class="quantity-field" readonly="readonly" name="qty" value="1">
                                <button type="button" class="quantity-button" name="add" value="+">+</button>
                                }
                            </div>
                            <div class="d-flex" style="height:45px">
                                <button type="button" disabled="@(!Model.IsAllowToOrder || (Model.StockTrackingIsEnabled && Model.StockQuantity <= 0))" class="fz-cart btn-add-cart" style="width:45px"><i class="fa-solid fa-cart-plus fa-xl"></i></button>
                                @if (SignInManager.IsSignedIn(User))
                                {
                                    <a class="fz-order add-to-wishlist" href="#" style="width:45px"><i class="fa-solid fa-face-grin-hearts fa-xl"></i></a>
                                }
                                else
                                {
                                    <a class="fz-order add-to-wishlist" style="width:45px" asp-area="Catalog" asp-controller="Account" asp-action="Login" asp-route-returnurl="@($"{Context.Request.Path}{Context.Request.QueryString}")"><i class="fa-solid fa-face-grin-hearts fa-xl"></i></a>
                                }                                        
                                <a href="#" class="fz-cart add-to-comparison" style="width:45px"><i class="fa-solid fa-not-equal fa-xl"></i></a>
                            </div>                                    
                        </form>
                    </div>
                }
@*                <ul class="list-inline product-ratings">
                    <li><input type="hidden" value="@Model.RatingAverage" readonly="readonly" class="rating-loading" step="1" data-size="xs" data-show-clear="false" data-show-caption="false" /></li>
                    <li class="product-review-list">
                        <span>(@Model.ReviewsCount) <a href="#reviews">@Localizer["reviews"]</a> | <a href="#addreview"> @Localizer["Add Review"]</a></span>
                    </li>
                </ul>*@
            </div>
        </div>
    </div>
    <div>
        <h3>@Localizer["Customer reviews"]</h3>
        @await Component.InvokeAsync("Review", new { entityId = Model.Id, entityTypeId = "Product" })
    </div>
    <br>
    <div>
        <h3>@Localizer["Customer comments"]</h3>
        @await Component.InvokeAsync("Comment", new { entityId = Model.Id, entityTypeId = "Product" })
    </div>
</div>
<div class="container-fluid p-sm-3 p-md-4 p-lg-5 mx-auto" style="padding-top:1rem !important">
    @if (Model.RelatedProducts.Any())
    {
        <!-- Related Products -->
        <h2 class="mt-2">@Localizer["Enjoy and see also"]</h2>
        <div class="row px-3 product-list">
            @foreach (var product in Model.RelatedProducts)
            {
                <partial name="../Shared/_ProductThumbnail.cshtml" model="product" />
            }
        </div>
    }
    @if (Model.CrossSellProducts.Any())
    {
        <!-- Cross-sell Products -->
        <h2 class="mt-2">@Localizer["Enjoy and take also"]</h2>
        <div class="row px-3 product-list">
            @foreach (var product in Model.CrossSellProducts)
            {
                <partial name="../Shared/_ProductThumbnail.cshtml" model="product" />
            }
        </div>
    }
    @await Component.InvokeAsync("ProductRecentlyViewed", new { productId = Model.Id })
</div>
@section scripts {
    <partial name="_ValidationScriptsPartial" />
    <script simpl-append-version="true" src="~/lib/smoothproducts/js/smoothproducts.js"></script>
    <script simpl-append-version="true" src="~/_content/SimplCommerce.Module.Catalog/product-detail.js"></script>
}
