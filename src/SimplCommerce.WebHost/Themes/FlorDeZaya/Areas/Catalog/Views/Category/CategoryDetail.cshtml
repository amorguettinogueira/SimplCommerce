@model SimplCommerce.Module.Catalog.Areas.Catalog.ViewModels.ProductsByCategory
@{
    ViewBag.Title = Model.CategoryMetaTitle ?? Model.CategoryName;
}

@section additionalMeta {
    <meta name="title" content="@ViewBag.Title" />
    <meta name="keywords" content="@Model.CategoryMetaKeywords" />
    <meta name="description" content="@Model.CategoryMetaDescription" />
}

@section head {
    <link simpl-append-version="true" rel="stylesheet" href="~/lib/nouislider/distribute/nouislider.min.css" />
}

<div class="offcanvas offcanvas-start" tabindex="-1" id="filter_products" aria-labelledby="filter_productsLabel">
    <div class="offcanvas-header">
        <h5 class="offcanvas-title" id="filter_productsLabel">@Localizer["Options"]</h5>
        <button type="button" class="btn-close text-reset" data-bs-dismiss="offcanvas" aria-label="Close"></button>
    </div>
    <div class="offcanvas-body">
        <h5 class="offcanvas-title" id="filter_productsLabel">@Localizer["Filter by"]</h5>
        <form id="productFilter" name="productFilter" method="GET" action="~/@Model.CategorySlug" class="accordion accordion-flush">
            @if (Model.FilterOption.Categories.Where(x => x.ParentId == Model.CategoryId).Any())
            {
                <div id="accordion-category" class="accordion-item">
                    <h2 class="accordion-header" id="cardHeaderCategory">
                        <button class="accordion-button open" type="button" data-bs-toggle="collapse" data-bs-target="#collapse-category">
                        @Localizer["Category"]
                        </button>
                    </h2>
                    <div id="collapse-category" class="accordion-collapse collapse show">
                        <div class="accordion-body">
                            <ul class="list-unstyled checkbox-list">
                                @foreach (var category in Model.FilterOption.Categories.Where(x => x.ParentId == Model.CategoryId))
                                {
                                    <li>
                                        <label class="checkbox">
                                            <input type="checkbox" value="@category.Slug" name="category" checked="@Model.CurrentSearchOption.GetCategories().Contains(category.Slug)">
                                            @category.Name
                                            <small>(@category.Count)</small>
                                        </label>
                                        @{ var children = Model.FilterOption.Categories.Where(x => x.ParentId == category.Id); }
                                        @if (children.Any())
                                        {
                                            <ul class="list-unstyled checkbox-list mb-0">
                                                @foreach (var child in children)
                                                {
                                                    <li>
                                                        <label class="checkbox">
                                                            <input type="checkbox" value="@child.Slug" name="category" checked="@Model.CurrentSearchOption.GetCategories().Contains(child.Slug)">
                                                            @child.Name
                                                            <small>(@child.Count)</small>
                                                        </label>
                                                    </li>
                                                }
                                            </ul>
                                        }
                                    </li>
                                }
                            </ul>
                        </div>
                    </div>
                </div>
            }
            <div id="accordion-brand" class="accordion-item">
                <h2 class="accordion-header" id="cardBrandHeader">
                    <button class="accordion-button open" type="button" data-bs-toggle="collapse" data-bs-target="#collapse-brand">
                        @Localizer["Brand"]
                    </button>
                </h2>
                <div id="collapse-brand" class="accordion-collapse collapse show">
                    <div class="accordion-body">
                        <ul class="list-unstyled checkbox-list">
                            @foreach (var brand in Model.FilterOption.Brands)
                            {
                                <li>
                                    <label class="checkbox">
                                        <input type="checkbox" value="@brand.Slug" name="brand" checked="@Model.CurrentSearchOption.GetBrands().Contains(brand.Slug)">
                                        @brand.Name
                                        <small>(@brand.Count)</small>
                                    </label>
                                </li>
                            }
                        </ul>
                    </div>
                </div>
            </div>
            @if (Model.FilterOption.Price.MaxPrice != Model.FilterOption.Price.MinPrice)
            {
                <div id="accordion-price" class="accordion-item">
                    <h2 class="accordion-header" id="cardHeaderPrice">
                        <button class="accordion-button open" type="button" data-bs-toggle="collapse" data-bs-target="#collapse-price">
                            @Localizer["Price"]
                        </button>
                    </h2>
                    <div id="collapse-price" class="accordion-collapse collapse show">
                        <div class="accordion-body">
                            <div id="priceSlider"></div>
                            <div class="d-flex justify-content-between pt-1">
                                <input type="hidden" id="originMinPrice" value="@Model.FilterOption.Price.MinPrice.ToString("F0")" />
                                <input type="hidden" id="originMaxPrice" value="@Model.FilterOption.Price.MaxPrice.ToString("F0")" />
                                <span id="minPrice"></span><span id="maxPrice"></span>
                            </div>
                        </div>
                    </div>
                </div>
            }
            <div class="accordion-item">
                <h2 class="accordion-header" id="cardHeaderSort">
                    <button class="accordion-button open" type="button" data-bs-toggle="collapse" data-bs-target="#collapse-sort">
                        @Localizer["Sort by:"]
                    </button>
                </h2>
                <div id="collapse-sort" class="accordion-collapse collapse show">
                    <div class="accordion-body sort-by">
                        @for (var i = 0; i < Model.AvailableSortOptions.Count; i++)
                        {
                            var shouldChecked = (i == 0 && string.IsNullOrEmpty(Model.CurrentSearchOption.Sort)) || Model.CurrentSearchOption.Sort == Model.AvailableSortOptions[i].Value;
                            <div class="form-check">
                                <input class="form-check-input" type="radio" id="CurrentSearchOption_Sort_@i" name="CurrentSearchOption.Sort" value="@Model.AvailableSortOptions[i].Value" checked="@shouldChecked">
                                <label class="form-check-label" for="CurrentSearchOption_Sort_@i">@Localizer[Model.AvailableSortOptions[i].Text]</label>
                            </div>
                        }
                    </div>
                </div>
            </div>
        </form>
    </div>
</div>
<div class="container-fluid p-sm-3 p-md-4 p-lg-5 mx-auto" style="padding-top:1rem !important">
    <div class="d-flex flex-row flex-wrap align-items-center justify-content-between mb-2">
        <div class="flex-col d-flex align-items-center">
            <nav>
                <ol class="breadcrumb m-0">
                    <li class="breadcrumb-item"><a href="~/">Home</a></li>
                        @if (Model.ParentCategorId.HasValue)
                        {
                            @await Component.InvokeAsync("CategoryBreadcrumb", new { categoryId = Model.ParentCategorId.Value })
                        }
                    <li class="breadcrumb-item active">@Model.CategoryName</li>
                </ol>
            </nav>
        </div>
        <div class="flex-col d-flex align-items-center">
            <h2 class="m-0">@Model.CategoryName</h2><small class="badge-results ms-2">@Model.TotalProduct @Localizer["results"]</small>
        </div>
        <div class="flex-col">
            <button class="btn btn-dark" type="button" data-bs-toggle="offcanvas" data-bs-target="#filter_products" aria-controls="filter_products"><span class="d-none d-sm-inline me-2">Filtrar</span><i class="fa-solid fa-filter"></i></button>
        </div>
    </div>
    <div class="row px-3 product-list">
        @foreach (var product in Model.Products)
        {
            <partial name="../Shared/_ProductThumbnail.cshtml" model="product" />
        }
    </div>
    <div class="row">
        <div class="col-md-12 text-right">
            <cs-pager cs-paging-pagesize="@Model.CurrentSearchOption.PageSize"
                        cs-paging-pagenumber="@Model.CurrentSearchOption.Page"
                        cs-paging-totalitems="@Model.TotalProduct"
                        cs-pagenumber-param="page"
                        asp-basehref="~/@Model.CategorySlug"
                        asp-all-route-data="@Model.CurrentSearchOption.ToDictionary()"
                        cs-pager-li-current-class="page-item active"
                        cs-pager-li-other-class="page-item"
                        cs-pager-li-non-active-class="page-item disabled"
                        cs-pager-link-current-class="page-link"
                        cs-pager-link-other-class="page-link"></cs-pager>
        </div>
    </div>
</div>

@section scripts {
    <script simpl-append-version="true" src="~/lib/wnumb/wNumb.js"></script>
    <script simpl-append-version="true" src="~/lib/nouislider/distribute/nouislider.min.js"></script>

    <script>
        var productFilter = {};
        productFilter.currentSearchOption = @Html.Raw(Model.CurrentSearchOption.ToJson());
        productFilter.priceSetting = {
            min: @Model.FilterOption.Price.MinPrice.ToString("F0"),
            max: @Model.FilterOption.Price.MaxPrice.ToString("F0"),
            currentMin: @((Model.CurrentSearchOption.MinPrice ?? Model.FilterOption.Price.MinPrice).ToString("F0")),
            currentMax: @((Model.CurrentSearchOption.MaxPrice ?? Model.FilterOption.Price.MaxPrice).ToString("F0"))
        };
    </script>
    <script simpl-append-version="true" src="~/_content/SimplCommerce.Module.Catalog/product-filter.js"></script>
}
